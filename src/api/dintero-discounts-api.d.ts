/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accounts/{aid}/automations/rules": {
    /**
     * Get available automations for the account
     *
     * scopes:
     * - admin:automations
     * - read:automations
     */
    get: operations["aid_automations_rules_get"];
    /**
     * Create a discount automation to apply on events received.
     *
     *
     * A automation can be used to automate the task of
     * giving discount to customers. The customer found in
     * the event will receive the discount.
     *
     * ###
     * Welcome discount: give discount to new user
     *
     *     {
     *       "requirement": {
     *         "events": ["customer_add"],
     *         "automation_from": "2018-05-07T08:54:31Z",
     *         "automation_to": "2018-06-07T08:54:31Z"
     *       },
     *       "actions": [
     *         {
     *           "type": "discount",
     *           "id": "cae3e485-0e15-4afa-bc66-472f843efb84"
     *         }
     *       ]
     *     }
     *
     * ###
     * Purchase discount: give discount on first purchase at store
     *
     *     {
     *       "name": "purchase at store sc029",
     *       "requirement": {
     *         "events": ["receipt_add"],
     *         "automation_from": "2018-05-07T08:54:31Z",
     *         "automation_to": "2018-06-07T08:54:31Z",
     *         "filters": {
     *           "$.store.id": ["sc029"]
     *         }
     *       },
     *       "actions": [
     *         {
     *           "type": "discount",
     *           "id": "cae3e485-0e15-4afa-bc66-472f843efb84"
     *         }
     *       ],
     *       "limitation": {
     *         "automation_repeat": 1
     *       }
     *     }
     *
     * scopes:
     * - admin:automations
     * - write:automations
     */
    post: operations["aid_automations_rules_post"];
  };
  "/accounts/{aid}/automations/rules/{arid}": {
    /**
     * Get details about an automations
     *
     * scopes:
     * - admin:automations
     * - read:automations
     */
    get: operations["aid_automations_rules_rid_get"];
    /**
     * Delete an automation rule.
     *
     * scopes:
     * - admin:automations
     * - write:automations
     */
    delete: operations["aid_automations_rules_rid_delete"];
  };
  "/accounts/{aid}/discounts/available_for_receipt": {
    /**
     * Find discounts available for the receipt
     *
     * ### Active discounts
     *
     * - `customer_id` will be used to find active discounts for the purchase.
     * - `customer.token` will be used to resolve `customer_id` if no `customer_id` is provided.
     * - No discounts will be given if the token does not resolve to any customer_id.
     * - A receipt with no `customer_id` and no `customer.token` will only be applicable for
     *   active discounts given to **`/`**
     *   ([see](#operation/aid_discounts_did_customers_post))
     *
     * ### Requirement of the receipt
     *
     *   - all items must have `eligible_for_discount` set to enable for discount
     *   - all items must have a positive `gross_amount` to qualify for discount
     *   - a `net` base discount reward requires the receipt to include existing
     *     discounts as discount_lines (on item) in order to calculate net
     *
     * A receipt that qualified for discount will have the `is_change`
     * property set to true. Any items that has received a discount will be
     * flagged by `is_change` and have one or more new entries to its
     * discount_lines.
     *
     * The receipt `discounts` list will be populated with all discounts the
     * receipt is qualified to receive
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     * - write:discounts:/available_for_receipt
     */
    post: operations["aid_discounts_available_for_receipt_post"];
  };
  "/accounts/{aid}/discounts/available_for_receipt/claims": {
    /**
     * Get all claims, limited by parameters. The result will
     * match all parameters with `AND`
     *
     * scopes:
     * - admin:discounts
     * - read:discounts
     * - read:discounts:/available_for_receipt
     */
    get: operations["aid_discounts_available_for_receipt_get_claims"];
    /**
     * Claim discount rewards, checks will be done to ensure that all
     * discount limitation are uphold
     *
     * Note, only the following discount limitation will affect
     * the success of a claim
     *
     *   - discount_reward_usage
     *   - discount_repeat_usage
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     * - write:discounts:/available_for_receipt
     */
    post: operations["aid_discounts_available_for_receipt_post_claim"];
  };
  "/accounts/{aid}/discounts/available_for_receipt/claims/{claim_id}": {
    /**
     * Get details about a claim
     *
     * scopes:
     * - admin:discounts
     * - read:discounts
     * - read:discounts:/available_for_receipt
     */
    get: operations["aid_discounts_available_for_receipt_get_claim"];
    /**
     * Release claim on discounts, revert previously claimed discount
     * and make them available for future purchase
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     * - write:discounts:/available_for_receipt
     */
    delete: operations["aid_discounts_available_for_receipt_delete_claim"];
  };
  "/accounts/{aid}/discounts/campaigns": {
    /**
     * List campaigns
     *
     * scopes:
     * - admin:discounts
     * - read:discounts
     */
    get: operations["aid_discounts_campaigns_get"];
    /**
     * Create a new campaign to group discount rules
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    post: operations["aid_discounts_campaigns_post"];
  };
  "/accounts/{aid}/discounts/campaigns/{campaign_id}": {
    /**
     * Get more details about a campaign
     *
     * scopes:
     * - admin:discounts
     * - read:discounts
     */
    get: operations["aid_discounts_campaigns_campaign_id_get"];
    /**
     * Update campaign details. Undeletes a deleted campaign.
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    put: operations["aid_discounts_campaigns_campaign_id_put"];
    /**
     * Delete a campagn.
     *
     * Deleting a campagn does not affect its discount rules. i.e. active
     * campagn rules will continue to be active after deleting the campagn
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    delete: operations["aid_discounts_campaigns_campaign_id_delete"];
  };
  "/accounts/{aid}/discounts/customers/{customer_id}/refs/{ref_id}": {
    /**
     * Get a customer discount ref.
     * scopes:
     * - admin:discounts
     * - read:discounts
     */
    get: operations["aid_discounts_customer_cid_get_ref_id"];
    /**
     * Add stamps and usage to a discount ref.
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    post: operations["aid_discounts_customer_cid_post_ref_id"];
    /**
     * Delete a customer discount ref. The discount will no longer
     * be available on purchase ([Post receipt for discount](#operation/aid_discounts_available_for_receipt_post))
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    delete: operations["aid_discounts_customer_cid_delete_ref_id"];
  };
  "/accounts/{aid}/discounts/customers/{customer_id}/rules": {
    /**
     * Get all discounts available for a customer, result will exclude
     * expired and inactive discounts
     *
     *
     * Expired discounts are:
     *
     *   - discount used up (customer has allready used it) and there
     *     was a limitation on the discount that prevents more use.
     *   - discount requirement purchase periode is in the past
     *   - discount that has been deleted
     *
     * Inactive discounts are:
     *
     *   - discount with `active` property set to false.
     *
     * Use value of `ref_id` as parameter value of `starting_after`
     *
     * scopes:
     * - admin:discounts
     * - read:discounts
     * - user:discounts
     */
    get: operations["aid_discounts_customer_cid_get"];
  };
  "/accounts/{aid}/discounts/events": {
    /**
     * Send an Event to the service.
     *
     * - rules automations will receive the event and give
     *   its discount to the customer found in the event
     *
     *
     * - Token received will be stored to support resolving
     *   customer from token when handling discounts available
     *   for receipt
     *
     *   scopes:
     *   - admin:discounts
     *   - write:discounts
     *   - write:discounts:/events
     */
    post: operations["aid_discounts_events_post"];
  };
  "/accounts/{aid}/discounts/public/rules": {
    /**
     * Get all discounts available for any customer given
     * current date, result will exclude expired and inactive
     * discounts
     *
     * Use value of `ref_id` as parameter value of `starting_after`
     *
     * scopes:
     * - admin:discounts
     * - read:discounts
     * - public:discounts
     */
    get: operations["aid_discounts_public_get"];
  };
  "/accounts/{aid}/discounts/rules": {
    /**
     * List discounts available for the account
     * scopes:
     * - admin:discounts
     * - read:discounts
     */
    get: operations["aid_discounts_get"];
    /**
     * Create a new discount for an account.
     *
     * A new discount will be **unavailable** for purchases
     * until the discount is given to one or more customer.
     *
     * Discount can be given to a customer by either adding
     * a automation to the discount that will grant the
     * discount to the customer from events received or by
     * adding customers to the discount.
     *
     * See [Discount Examples](#section/Discount-Examples)
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    post: operations["aid_discounts_post"];
  };
  "/accounts/{aid}/discounts/rules/{did}": {
    /**
     * Get more details about a discount, includes statistics
     * about the discount
     * scopes:
     * - admin:discounts
     * - read:discounts
     */
    get: operations["aid_discounts_did_get"];
    /**
     * Update discount details.
     *
     *
     * **Caution**: Update of non-meta properties, properties that
     * changes requirement or limitation can create conflict with
     * the usage history of the discount.
     *
     * Example is to change requirement.item.items, such change would
     * mean that purchases before the change would not be correcly
     * rewarded given the new version of the discount.
     *
     * We recomment to limit the update of a discount to meta only
     * properties if the discount has previously been used in a
     * purchase.
     *
     * Update on requirement `purchase_to` is only supported when
     * the new value that is after current value.
     *
     * Update of requirement `purchase_from` and `reward` is not supported.
     *
     * Update `discount.active` to toggle if an discount is active
     * and available for purchase.
     *
     * Update `discount.private` to toggle if an discount is included
     * in public discount collection if given to all customers
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    put: operations["aid_discounts_did_put"];
    /**
     * Delete a discount
     *
     * - Customer that has previously received the discount will not
     *   be able to use it on purchases.
     * - rules automations belonging to the discount will be deleted
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    delete: operations["aid_discounts_did_delete"];
  };
  "/accounts/{aid}/discounts/rules/{did}/customers": {
    /**
     * Get list of customers refs for a discount. A ref is an instant
     * of discount given to a customer or `all customers`. See
     * [Add customers](#operation/aid_discounts_did_customers_post)
     *
     * scopes:
     * - admin:discounts
     * - read:discounts
     */
    get: operations["aid_discounts_did_customers_get"];
    /**
     * Give the Discount to one or more customers
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    post: operations["aid_discounts_did_customers_post"];
    /**
     * Remove Discount from one or more customers
     *
     * scopes:
     * - admin:discounts
     * - write:discounts
     */
    delete: operations["aid_discounts_did_customers_delete"];
  };
  "/accounts/{aid}/discounts/rules/{did}/usages": {
    /**
     * Get list of discount refs usages.
     * scopes:
     * - admin:discounts
     * - read:discounts
     */
    get: operations["aid_discounts_did_usages_get"];
  };
  "/accounts/{aid}/discounts/search/rules": {
    /**
     * Search for active discounts given current date matching queries
     *
     * scopes:
     * - admin:discounts
     * - read:discounts
     */
    post: operations["aid_discounts_rules_search_post"];
  };
}

export interface definitions {
  AutomationActionDiscount: {
    /**
     * @description Id of existing discount to give to customer the
     * automation originated from
     */
    id: string;
  } & definitions["AutomationAction"];
  AutomationActionHTTP: definitions["AutomationAction"] & {
    /** @example https://api.dintero.com/v1/accounts/{aid}/discounts/rules/{did}/customers */
    url: string;
    /** @example POST */
    method: string;
    /** @example application/json */
    content_type?: string;
    /** @example { "customers": [ "$.customer_id" ] } */
    body?: string;
  };
  Entity: {
    /**
     * Format: uuid
     * @description An UUID that uniquely identifies the resource
     */
    id?: string;
    /**
     * Format: date-time
     * @description The date-time when the resource was created
     */
    created_at?: string;
    /**
     * @description The ID of the user/client created the resource
     *
     * @example 1c92f7e1-2897-4d46-bdcc-c127a914fb4e
     */
    created_by?: string;
    /**
     * Format: date-time
     * @description The date-time when the resource was last updated
     */
    updated_at?: string;
    /**
     * @description The ID of the user/client created the resource
     *
     * @example 1c92f7e1-2897-4d46-bdcc-c127a914fb4e
     */
    deleted_by?: string;
    /** Format: date-time */
    deleted_at?: string;
  };
  AutomationAction: {
    type: string;
  };
  Automation: {
    /**
     * @description Optinal name for the automation rule
     * @example Company Automation
     */
    name?: string;
    /**
     * @description Optional description for the automation rule
     * @example Automation for non blocked companies with postal_code 0342 or 6901
     */
    description?: string;
    requirement: {
      /**
       * Format: date-time
       * @description limit the time when automation is activated, the value must be
       * before the discount `requirement.purchase_to` time if the action
       * type is `discount`
       */
      automation_from: string;
      /**
       * Format: date-time
       * @description limit the time when the automation is active, the value must be
       * before the discount `requirement.purchase_to` time if the action
       * type is `discount`
       */
      automation_to: string;
      /** @description Events that the automation will be applied to (triggers) */
      events: (
        | "customer_add"
        | "customer_update"
        | "customer_remove"
        | "token_add"
        | "token_remove"
        | "receipt_add"
      )[];
      /**
       * @description limit the automation by properties read from the events accepted
       * by the automation
       * The key for each filter must be a valid JSONPath, that will be used
       * to resolve the event value to match with the path value. The result of the JSONPath
       * must be a single value or list of values to compare.
       *
       * #### Excact matching
       *
       *   - `"$.store.id": ["S00123"]`
       *
       * #### Anything-but matching
       *
       *   - `$.status: [{"anything-but":"blocked"}]`
       *
       * #### Numeric Range matching
       *
       * In addition to the `=` operator, a numeric filter can include `<`, `<=`, `>`, and `>=`
       *
       *   - `$.gross_amount: [{"numeric":[">", 50000]}]`
       *   - `$.gross_amount: [{"numeric":[">", 0, "<=", 1500]}]`
       *
       * #### AND/OR Logic
       * Apply AND/OR logic to your filter policies as follows.
       *
       * ##### AND logic
       * Apply AND logic by using multiple names (keys). For example, the filters:
       *
       *       {
       *         "$.store.id": ["S00129"],
       *         "$.gross_amount": [{"numeric":[">", 50000]}]
       *       }
       *
       * Matches events with a store.id of S00129 and a gross_amount value that's over 50000.
       *
       * ##### OR logic
       *
       * Apply OR logic by assigning multiple values to an attribute name. For example, the filter:
       *
       *     "$.addresses[*].postal_code": ["0342", "6901", "5020"]
       *
       * Matches events with an address.postal_code value of 0342 or 6901 or 5020.
       *
       * @example {
       *   "$.type": [
       *     "company"
       *   ],
       *   "$.status": [
       *     {
       *       "anything-but": "blocked"
       *     }
       *   ],
       *   "$.addresses[*].postal_code": [
       *     "0342",
       *     "6901"
       *   ]
       * }
       */
      filter?: { [key: string]: unknown };
    };
    limitation?: {
      /**
       * @description limit the number of times the automation will trigger and
       * give the customer the discount. A value of `-1` will disable the
       * limitation and the automation will give discount to the customer
       * every time
       *
       * @default 1
       */
      automation_repeat: number;
    };
    /**
     * @description Actions to perform if the automation is triggered
     * (given events, limitation and filter)
     */
    actions: definitions["AutomationAction"][];
  };
  Error: {
    error: {
      /** @description The code used to identify the error/warning */
      code?: string;
      /** @description The nested error(s) encountered during validation */
      errors?: { [key: string]: unknown }[];
      /** @description The human readable description of the error/warning */
      message: string;
    };
  };
  Item: {
    /** @example b714118 */
    id?: string;
    /** @example B1 */
    group_id?: string;
  };
  Limitation: {
    /** @description Dynamically control if the discount should be active. */
    discount_activation?: {
      /**
       * @description - `deactivate_if_discount_active`: The discount is deactivated if
       *   the value match the `id` of another active discount
       *   available for the purchase
       *
       * @enum {string}
       */
      type: "deactivate_if_discount_active";
      /** @description Value given the type */
      value: string;
    }[];
    /** @description Limit the discount to hours of the day */
    discount_hours?: {
      /**
       * @description The timezone identifier for the hour start/end, see
       * https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
       * for examples. DST is handled when using a Timezone with DST.
       *
       * @default Europe/Oslo
       */
      timezone?: string;
      /**
       * @description an array of periods, day and time when discount will be
       * available. Multiple periods for one day is accepted.
       * Any hour of purchase is accepted if the array is empty.
       */
      hours: {
        /** @enum {string} */
        day: "mon" | "tue" | "wed" | "thu" | "fri" | "sat" | "sun";
        /**
         * Format: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
         * @example 10:00
         */
        start: string;
        /**
         * Format: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
         * @example 20:00
         */
        end: string;
      }[];
    };
    /**
     * @description Limit the number of rewards to be given in a purchase
     * where multiple receipt items match the requirement
     *
     * @default -1
     * @example 1
     */
    discount_reward_usage?: number;
    /**
     * @description Limit how many other discounts can be combined in a purchase
     * where multiple discounts are applicable.
     *
     * @default -1
     * @enum {integer}
     */
    discount_combination?: -1 | 0;
    /**
     * @description Limit what items in the purchase is eligible for this discount
     *
     * @default item_eligible_for_discount
     * @enum {string}
     */
    discount_eligible?:
      | "item_eligible_for_discount"
      | "item_eligible_for_discount_no_discount"
      | "receipt_no_discount";
    /**
     * @description Limit how many purchases the discount can be used
     *
     * @default -1
     */
    discount_repeat_usage?: number;
    /**
     * @description Number of days between first and last (exceeding count) stamp
     * where reward will be given
     *
     * @default -1
     * @example 100
     */
    stamp_expire_days?: number;
    /** @description items not eligible for discount. */
    blacklist?: definitions["Item"][];
  };
  CustomerRequirement: {
    /** @description Require customer to have one or more addresses matching the properties. All properties defined must match a single address. */
    addresses?: {
      /**
       * @example [
       *   "NO"
       * ]
       */
      country?: string[];
      /**
       * @example [
       *   "0349"
       * ]
       */
      postal_code?: string[];
      /**
       * @example [
       *   "Oslo"
       * ]
       */
      postal_place?: string[];
      /**
       * @example [
       *   "offsite"
       * ]
       */
      custom_type?: string[];
      /**
       * @example [
       *   "custom"
       * ]
       */
      type?: string[];
    }[];
    /** @description Require customer to be a company matching all properties defined. */
    company?: {
      /**
       * @example [
       *   "TKP tech AS"
       * ]
       */
      bussiness_name?: string[];
      /**
       * @example [
       *   "production",
       *   "research"
       * ]
       */
      department?: string[];
      /**
       * @example [
       *   "J62.0.1",
       *   "J62.0.2"
       * ]
       */
      industry?: string[];
      /**
       * @example [
       *   "20"
       * ]
       */
      number_of_employees?: string[];
      /**
       * @example [
       *   "123456789MVA"
       * ]
       */
      organization_number?: string[];
      /**
       * @example [
       *   "https://dintero.com"
       * ]
       */
      website?: string[];
    };
    /**
     * @example [
     *   "1990-09-20",
     *   "1990-05-10"
     * ]
     */
    date_of_birth?: string[];
    enrolled_by?: {
      /**
       * @example [
       *   "url"
       * ]
       */
      type?: string[];
      /**
       * @example [
       *   "https://mypage.example.dintero.com"
       * ]
       */
      value?: string[];
    };
    /**
     * @example [
     *   "sc029"
     * ]
     */
    favorite_store?: string[];
    /**
     * @example [
     *   "John"
     * ]
     */
    first_name?: string[];
    /**
     * @example [
     *   "male"
     * ]
     */
    gender?: string[];
    /**
     * @example [
     *   "Doe"
     * ]
     */
    last_name?: string[];
    marketing_consent?: {
      email?: {
        /**
         * @example [
         *   "true"
         * ]
         */
        consent?: string[];
      };
      sms?: {
        /**
         * @example [
         *   "true"
         * ]
         */
        consent?: string[];
      };
    };
    /**
     * @description limit discount to only receipt where customer status
     * is included in the receipt and match one of the status
     * values required by the discount
     *
     * @example [
     *   "vip"
     * ]
     */
    status?: string[];
    term?: {
      id?: string[];
    };
    type?: string[];
    /**
     * @description Limit discount to only receipt where customer attributes are included
     * and match one of the values required by the discount
     */
    attributes?: { [key: string]: string[] };
  };
  /**
   * @description Use mix in case where all items are required in one purchase.
   *
   * A reward will be eligible to all items in the mix that
   * has `mix.reward_eligible=true`
   */
  ItemMixProperty: {
    /**
     * @description Acceptable items for the mix "item" (`any`). No wildcard `*` is
     * accepted.
     *
     * @example [
     *   {
     *     "id": "b714118"
     *   },
     *   {
     *     "group_id": "g4"
     *   }
     * ]
     */
    items?: {
      /**
       * Format: ^(\*.+|(?!\*).*)$
       * @example b714118
       */
      id?: string;
      /**
       * Format: ^(\*.+|(?!\*).*)$
       * @example g4
       */
      group_id?: string;
    }[];
    /** @description minimum quantity of given item (match by id or group) by the mix */
    quantity: number;
    /**
     * @description The item will be eligible for discount when calculating the reward
     * Example: The value of `discount_item_new_price` reward will be the
     * total price of all items in a mix that has the applicable set to `true`
     */
    reward_eligible: boolean;
  };
  StoreRequirement: {
    id?: string[];
    /** @description name of the store, aka trade name of the store */
    name?: string[];
    /** @description Official name of the person or entity that owns the store. */
    business_name?: string[];
    /** @description Require customer to have one or more addresses matching the properties. All properties defined must match a single address. */
    address?: {
      /**
       * @example [
       *   "NO"
       * ]
       */
      country?: string[];
      /**
       * @example [
       *   "0349"
       * ]
       */
      postal_code?: string[];
      /**
       * @example [
       *   "Oslo"
       * ]
       */
      postal_place?: string[];
    };
    chain?: string[];
    email?: string[];
    gln?: string[];
    organization_number?: string[];
    phone_number?: string[];
    /**
     * @description A four-digit Merchant Category Code (MCC) for the store
     * [ISO 18245:2003](https://www.iso.org/standard/33365.html)
     */
    mcc?: string[];
    /**
     * @description Ranges of MCC codes to accept the discount for.
     * Multiple ranges are possible.
     * Prefer `mcc` if not a range.
     */
    mcc_ranges?: {
      /**
       * Format: iso-18245
       * @example 5814
       */
      start: string;
      /**
       * Format: iso-18245
       * @example 5815
       */
      end: string;
    }[];
    /**
     * @description Merchant number associated with the stores
     * payment terminal
     */
    bax?: string[];
    /**
     * @description Id to a specific point-of-sale (POS) terminal
     * or workstation
     */
    terminal_id?: string[];
  };
  /** @description Discount base requirement */
  BaseRequirement: {
    customer?: definitions["CustomerRequirement"];
    item?: {
      /**
       * @description minimum number of items
       *
       * @default 0
       */
      quantity?: number;
      /**
       * @description Required mix items for the discount.
       *
       * A purchase must include `all` the items to fulfill the `item.mixes`
       * requirement.
       */
      mixes?: definitions["ItemMixProperty"][];
      /**
       * @description Required items for the discount
       *
       * A purchase can include `any` of the items to fulfill the `item.items`
       * requirement.
       *
       * The values contols if the reward is given on the receipt (all items) or
       * if they are limited to matching items
       *
       * **Receipt**
       * - A rule with no items or items with only wildcard items
       *
       * **Item**
       * - A rule with one or more items (except wildcard)
       * - A rule with a single item `{"id": "ANY_ITEM"}` in items
       */
      items?: definitions["Item"][];
    };
    /** @description `DEPRECATED`: [@since 2021-09-01](#section/Changelog/2021-09-01) */
    store_ids?: string[];
    /**
     * @description Minimum gross amount on purchase.
     * Monetary amount in smallest unit for the currency
     *
     * @default 0
     */
    gross_amount?: number;
    /**
     * @description List of valid currencies, or `[{"anything-but": ["NOK"]}]` to exclude currencies.
     * Currency format is the three-character [ISO-4217 currency](https://en.wikipedia.org/wiki/ISO_4217).
     */
    currencies?: unknown[];
    /**
     * @description Stamp count required for the reward
     *
     * @example 5
     */
    stamp?: number;
    /**
     * @description A code required for the reward. The purchase must include the
     * promotion code in the `receipt.discount_code` property or as
     * an `receipt.item` where the `item.id` is the promotion code.
     *
     * @example TACO
     */
    discount_code?: string;
    store?: definitions["StoreRequirement"];
  };
  Requirement: definitions["BaseRequirement"] & {
    /** Format: date-time */
    purchase_from: string;
    /** Format: date-time */
    purchase_to: string;
  };
  Reward: {
    /**
     * @description
     * Reward Type:
     *   * `discount_amount` - value as discount
     *   * `discount_percent` - value percentage of gross amount
     *       as discount
     *   * `discount_item_new_price` - discount as old price subtracted with value
     *   * `discount_item_quantity` - number of items to get as discount (free)
     *   * `discount_item_percent` - percent discount of the cheapest item (stamp)
     *       as discount
     *   * `discount_debit` - value as discount, remaining amount after a
     *     purchase will be available in future purchases (if not limited by usage)
     *   * `discount_mix_new_price` - discount as old mix total value (reward_eligible=true)
     *     subtracted with value
     *
     * @enum {string}
     */
    type:
      | "discount_amount"
      | "discount_percent"
      | "discount_item_new_price"
      | "discount_item_quantity"
      | "discount_item_percent"
      | "discount_mix_new_price"
      | "discount_debit";
    /**
     * @description The reward value, unit of the value is resolved
     * from the reward type
     *
     * Examples:
     *   - Percent: 10.5
     *   - Amount: 10000 (amount in smallest unit for the currency)
     *   - Quantity: 1
     *
     * @example 10000
     */
    value: unknown;
    /**
     * @description Reward values that is used to "override" the reward value for matching items.
     * Add support for having a single rule for multiple items that gives different
     * reward value for each items
     *
     * > Only available for rules where `requirements.item.items` is non-empty.
     */
    values?: {
      /**
       * @description `id` or `group_id` is required, if both are included both id and
       * group id must match
       */
      items: {
        /** @example b714118 */
        id?: string;
        /** @example B1 */
        group_id?: string;
      }[];
      value: number;
    }[];
    /**
     * @description Let the discount reward be calculated from net or gross price.
     * Not applicable for `discount_item_new_price`
     *
     * *Example*:
     *   item A à 100,- NOK with existing rebate of 20,-
     *
     *   - 10% net reward is 10% of 80,- : 8,-
     *   - 10% gross reward is 10% of 100,- : 10,-
     *
     *   * *net*: `gross - "any existing discounts"`
     *   * *gross*: `"total expense amount, including taxes"`
     *
     * @default gross
     * @enum {string}
     */
    base?: "net" | "gross";
    /**
     * @description How the reward will be added to the receipt.
     * - `discount`: the reward will be applied as a discount directly on the receipt
     * - `bonus`: the reward will be accumulated as bonus on the customers discount balance
     *
     * @default discount
     * @enum {string}
     */
    effect?: "discount" | "bonus";
  };
  /**
   * @description Links to resources related to the discount
   * @example [
   *   {
   *     "href": "https://example.dintero.com/c/photos/2018/6_20_thumbnail_discount_image.png",
   *     "rel": "thumbnail_discount_image"
   *   },
   *   {
   *     "href": "https://example.dintero.com/c/photos/2018/6_20_medium_discount_image.png",
   *     "rel": "medium_discount_image"
   *   },
   *   {
   *     "href": "https://example.dintero.com/shop?utm_source=dintero&utm_medium=email&utm_campaign=spring-summer",
   *     "rel": "webshoop"
   *   },
   *   {
   *     "href": "https://example.dintero.com/newsletter/2018.pdf",
   *     "rel": "newletter",
   *     "type": "application/pdf"
   *   }
   * ]
   */
  Links: {
    /**
     * Format: uri
     * @description The URL of the link.
     */
    href: string;
    /**
     * @description Specifies the relationship between the discount and the link
     *
     * Following `rel` values are reserved for specific usage
     *
     *   - thumbnail_discount_image: link to discount image
     *   - medium_discount_image: link to discount image
     *   - large_discount_image: link to discount image
     *   - webshop: link to site where the discount may be used
     */
    rel?: string;
    /** @description Specifies the media type of the link */
    type?: string;
  }[];
  Discount: {
    /**
     * Format: uuid
     * @description An UUID that uniquely identifies the resource
     */
    id?: string;
    /**
     * Format: date-time
     * @description The date-time when the resource was created
     */
    created_at?: string;
    /**
     * @description The ID of the user/client created the resource
     *
     * @example 1c92f7e1-2897-4d46-bdcc-c127a914fb4e
     */
    created_by?: string;
    /**
     * Format: date-time
     * @description The date-time when the resource was last updated
     */
    updated_at?: string;
    /**
     * @description The ID of the user/client created the resource
     *
     * @example 1c92f7e1-2897-4d46-bdcc-c127a914fb4e
     */
    deleted_by?: string;
    /** Format: date-time */
    deleted_at?: string;
    /** @description The campaign the rule belongs to */
    campaign_id?: string;
    /**
     * @description the discount is active and can be available
     * for purchase (if given to any or all customers)
     *
     * @default true
     */
    active?: boolean;
    /**
     * @description the discount will be excluded from  public discount collection
     * (GET /discounts/public/rules).
     *
     * @default false
     */
    private?: boolean;
    /**
     * @description The ID of the user/client that last updated the resource
     *
     * @example 3d1e4824-5474-48e7-a369-4f603fa4c5b8
     */
    updated_by?: string;
    /**
     * @description The discount base type * `receipt` discount is given on receipt * `item` discount is given to items
     * @enum {string}
     */
    type?: "item" | "receipt";
    /** @example Spar 100,- */
    name?: string;
    /**
     * @description Text that should be used when displaying
     * the discount, e.g. on receipt
     *
     * @example Mai Salg
     */
    receipt_text?: string;
    /**
     * Format: date-time
     * @description Make the discount visible to the customer from
     * given date. Default behavior is to only return
     * discount to the customer where the current time
     * is between purchase_from and purchase_to
     */
    visible_from?: string;
    /** @example Gjør et Stablestol kupp! */
    description?: string;
    limitation?: definitions["Limitation"];
    requirement: definitions["Requirement"];
    reward: definitions["Reward"];
    /**
     * @description Additional metadata about the discount
     *
     * Metadata prefixed with `dintero:exclude:public:` will
     * be excluded when listing the rules from the public endpoint
     *
     * - [GET /v1/accounts/{aid}/discounts/public/rules](#operation/aid_discounts_public_get)
     *
     * and included in all other endpoints that returns discount rules
     *
     * @example {
     *   "campaign_id": "V101",
     *   "is_featured": true,
     *   "dintero:private_text:kind": "Gold"
     * }
     */
    metadata?: { [key: string]: unknown };
    links?: definitions["Links"];
  };
  DiscountRefs: definitions["Discount"] & {
    /**
     * @description References to instances of the discount, a customer can
     * have multiple instances of the same discount, this propery
     * list the instances used
     */
    refs?: {
      /**
       * @description reference id to the customer instance of the
       * discount
       *
       * @example e3da6be5-d8e0-466c-af66-b7f69472ebb5
       */
      id?: string;
      /**
       * @description number of stamp collected by the discount when
       * used on the receipt.
       */
      stamp?: number;
      /**
       * @description reward amount for the the ref used,
       * monetary amount in smallest unit for the currency
       *
       * @example 10000
       */
      amount?: number;
      /**
       * @description reward bonus for the ref used
       *
       * @example 9050
       */
      bonus?: number;
      /** @description statistics for given discount instance (ref) */
      statistics?: {
        /**
         * @description total amount discount given, inclusive discount
         * amounts from previous purchases where the
         * the discount was used
         *
         * @example 15050
         */
        amount?: number;
        /**
         * @description total bonus given, inclusive bonus from previous
         * purchases where the the discount was used
         *
         * @example 11050
         */
        bonus?: number;
        /**
         * @description the discount debit balance, only applicable if
         * discount reward type is `discount_debit`
         *
         * @example 12350
         */
        debit_balance?: number;
        /**
         * @description total stamp collected by the discount, inclusive
         * previous purchases
         *
         * @example 11
         */
        stamp?: number;
        /**
         * @description total times the discount reward was used,
         * inclusive discount usage from previous purchases
         *
         * @example 2
         */
        usage?: number;
      };
      /**
       * @description Items receiving the discount, list what items
       * received an discount_lines entry for this discount
       *
       * @example [
       *   {
       *     "line_id": 1,
       *     "amount": 3000
       *   },
       *   {
       *     "line_id": 5,
       *     "amount": 7000
       *   }
       * ]
       */
      items?: {
        /** @description item line_id */
        line_id?: number;
        /** @description bonus for given line_id */
        bonus?: number;
        /**
         * @description discount amount for given line_id
         * monetary amount in smallest unit for the currency
         */
        amount?: number;
      }[];
      /**
       * @description number of times the ref was used
       * @example 1
       */
      usage?: number;
    }[];
  };
  Address: {
    /** @example Sommerkroveien 34 */
    address_line: string;
    /** @example PB 123 */
    address_line_2?: string;
    /** @example 0349 */
    postal_code?: string;
    /** @example Oslo */
    postal_place: string;
    /**
     * Format: iso-3166-1
     * @description ISO 3166-1 country code
     *
     * @example NO
     */
    country: string;
  };
  Store: {
    /** @example sc029 */
    id: string;
    /**
     * @description name of the store, aka trade name of the store
     *
     * @example SC Oslo
     */
    name?: string;
    /**
     * @description Official name of the person or entity that owns the store.
     *
     * @example SC Oslo AS
     */
    business_name?: string;
    address?: definitions["Address"];
    /** @example SuperChain */
    chain?: string;
    /** @example contact@superchain.com */
    email?: string;
    /** @example 5790001398644 */
    gln?: string;
    /** @example 123456789MVA */
    organization_number?: string;
    /** @example +4738260107 */
    phone_number?: string;
    /**
     * Format: iso-18245
     * @description A four-digit Merchant Category Code (MCC) for the store
     * [ISO 18245:2003](https://www.iso.org/standard/33365.html)
     *
     * @example 5814
     */
    mcc?: string;
    /**
     * @description Merchant number associated with the stores
     * payment terminal
     *
     * @example 102603
     */
    bax?: string;
    /**
     * @description Id to a specific point-of-sale (POS) terminal
     * or workstation
     *
     * @example T0292
     */
    terminal_id?: string;
  };
  InfoCodeItem: {
    /** @example 1 */
    line_id?: number;
    /** @description Monetary amount in smallest unit for the currency */
    amount?: number;
    /**
     * @description Monetary value with decimal
     * @example 1.14
     */
    amount_dwh?: string;
    infocode_id?: string;
    sub_infocode_id?: string;
    information?: string;
    input_type?: number;
    /** @example false */
    withdrawal_from_stock?: boolean;
  };
  TaxItem: {
    /**
     * @description Monetary amount in smallest unit for the currency
     *
     * @example 5584
     */
    amount?: number;
    /**
     * @description Monetary value with decimal
     * @example 5584.0440
     */
    amount_dwh?: string;
    /** @example false */
    exempt?: boolean;
    /** @example true */
    included_in_price?: boolean;
    /** @example 25 */
    percentage?: number;
    /**
     * @description Total monetary value without tax
     * @example 27920
     */
    tax_basis?: number;
    /**
     * @description Total monetary value without tax in decimal
     * @example 27920.22
     */
    tax_basis_dwh?: string;
    /** @example 3 */
    tax_code?: string;
    /** @example Vmva-høy */
    tax_group?: string;
  };
  /** @description Identify item attributes, such as size and color */
  Dimension: {
    color?: string;
    size?: string;
    style?: string;
    config?: string;
    variant?: string;
  };
  /** @enum {string} */
  DiscountType:
    | "customer"
    | "periodic"
    | "manual"
    | "loyalty"
    | "total"
    | "employee"
    | "external";
  DiscountItem: {
    /**
     * @description Monetary amount in smallest unit for the currency
     *
     * @example 4400
     */
    amount?: number;
    /**
     * @description Optional, set if the amount given was from a percentage discount
     *
     * @example 44
     */
    percentage?: number;
    discount_type?: definitions["DiscountType"];
    /** @example 766da0ef-9283-42bd-b012-0582344ec53c */
    discount_id?: string;
    description?: string;
    /** @example 1 */
    line_id?: number;
  };
  BonusItem: {
    /**
     * @description Bonus in smallest unit for the currency
     * @example 3130
     */
    bonus?: number;
    /**
     * @description Optional, set if the bonus given was from a percentage discount
     *
     * @example 10
     */
    percentage?: number;
    discount_type?: definitions["DiscountType"];
    /** @example 766da0ef-9283-42bd-b012-0582344ec53c */
    discount_id?: string;
    description?: string;
    /** @example 1 */
    line_id?: number;
  };
  ExtraInfo: {
    key?: string;
    value?: string;
    /** @enum {string} */
    value_type?: "string" | "integer" | "number" | "boolean" | "datetime";
  };
  ReceiptItem: {
    /** @example 175938 */
    id?: string;
    /**
     * @example [
     *   {
     *     "id": "B234",
     *     "name": "Stol"
     *   },
     *   {
     *     "id": "B1",
     *     "name": "Møbel"
     *   }
     * ]
     */
    groups?: {
      /** @description group id */
      id: string;
      /** @description group name */
      name?: string;
    }[];
    /**
     * @default 1
     * @example 2
     */
    quantity?: number;
    /**
     * @description unit type
     * @example stk
     */
    unit?: string;
    /** @example Stablestol for utendørsbruk */
    description?: string;
    /** @example Stablestol */
    description_alias?: string;
    /**
     * @description Monetary amount in smallest unit for the currency
     * after discounts for items in this line
     *
     * @example 27840
     */
    net_amount?: number;
    /**
     * @description Monetary amount in smallest unit for the currency
     * after discounts for items in this line in decimal
     *
     * @example 27840.10
     */
    net_amount_dwh?: string;
    /**
     * @description Monetary amount in smallest unit for the currency
     * before discounts for items in this line
     *
     * @example 39800
     */
    gross_amount?: number;
    /**
     * @description Monetary amount in smallest unit for the currency
     * before discounts for items in this line in decimal
     *
     * @example 34800.12
     */
    gross_amount_dwh?: string;
    /** @example 10900 */
    unit_gross_price?: number;
    /** @example 25 */
    tax_percent?: number;
    /** @example 1 */
    line_id?: number;
    /** @example 3123212343212 */
    barcode?: string;
    /**
     * @description The purchase price the company pay for item
     * @example 2033
     */
    cost_price?: number;
    /** @example false */
    voided?: boolean;
    /**
     * @description The price is calculated from scale (weight/volume).
     *
     * @example false
     */
    scale_item?: boolean;
    /** @example true */
    eligible_for_discount?: boolean;
    /** @example true */
    included_in_total_discount?: boolean;
    /** @example false */
    price_has_been_keyedIn?: boolean;
    /** @example false */
    discount_has_been_keyedIn?: boolean;
    /** @example false */
    is_return_item?: boolean;
    /** @example false */
    is_linked_item?: boolean;
    /** @example false */
    is_virtual_product?: boolean;
    /**
     * @description Discount applied to gross amount
     * @example true
     */
    is_changed?: boolean;
    /**
     * @description Id of the sales person if other
     * then the operator
     *
     * @example 000111
     */
    salesperson_id?: string;
    /**
     * @description Name of the sales person
     *
     * @example Jesper
     */
    salesperson_name?: string;
    /** @example 32424234231312312 */
    serial_id?: string;
    /** @example Kan være hva som helst */
    comment?: string;
    infocode_lines?: definitions["InfoCodeItem"][];
    tax_lines?: definitions["TaxItem"][];
    dimension?: definitions["Dimension"];
    discount_lines?: definitions["DiscountItem"][];
    bonus_lines?: definitions["BonusItem"][];
    extra_info?: definitions["ExtraInfo"][];
  };
  CardInfo: {
    /** @description Monetary amount in smallest unit for the currency */
    balance_amount?: number;
    /** @description Monetary amount in smallest unit for the currency */
    card_amount?: number;
    issuer_id?: number;
    /** @example Barcley */
    issuer_name?: string;
    /** @example 022 */
    session_id?: string;
    /** @example 71015233 */
    terminal_id?: string;
    /** @example ************00198-1 */
    card_number?: string;
    /** @example VISA */
    card_type?: string;
    /** @example BAX: 111010-71015233\n\r\11/11/2015 14:41\n\r\345849\n\r\ VISA CLASSIC\n\r\************5671\n\r\AID:A0000000031010\n\r\ REF:011 006687000000\n\r\RESP:00 GODKJENT\n\r\RETUR AV VARER\n\r \NOK=           50.00\n\r\SIGNATUR................\n\r \KORTHOLDERS KOPI */
    receipt?: string;
  };
  PaymentItem: {
    /** @example 1 */
    line_id?: number;
    /** @description Monetary amount in smallest unit for the currency */
    amount?: number;
    type_id?: string;
    /**
     * @description Id of the token
     * @example 983558fe-05bd-495f-92b5-9075d085db32
     */
    token_id?: string;
    /**
     * @description The token issuer
     * @example VIPPS
     */
    token_type?: string;
    description?: string;
    voided?: boolean;
    card_info?: definitions["CardInfo"];
    /** @example B00668107235 */
    reference_id?: string;
    infocode_lines?: definitions["InfoCodeItem"][];
  };
  Receipt: definitions["Entity"] & {
    /** @description List all discounts referenced in discount_lines */
    discounts?: definitions["DiscountRefs"][];
    store: definitions["Store"];
    items?: definitions["ReceiptItem"][];
    /** @example 714118 */
    receipt_id: string;
    /** @description Details for the delivery */
    delivery?: {
      /** @example John */
      first_name?: string;
      /** @example Doe */
      last_name?: string;
      /** @example customer@example.com */
      email?: string;
      /**
       * Format: ^\+?[1-9]\d{1,14}$
       * @description A phone number in E.164 number formatting.
       *
       * @example +4799999999
       */
      phone_number?: string;
      address?: definitions["Address"];
    };
    /**
     * @description The customer id identifying the customer.
     * (must not have trailing or leading spaces)
     *
     * @example C13db4f63
     */
    customer_id?: string;
    /** @description The customer, owner of the receipt */
    customer?: {
      /** @example male */
      gender?: string;
      /** @example John */
      first_name?: string;
      /** @example Doe */
      last_name?: string;
      /** @example customer@example.com */
      email?: string;
      /**
       * @description A set of key/value pairs that you can attach to a
       * customer object. It can be useful for storing additional
       * information about the customer in a structured format.
       *
       * @example {
       *   "dob_year": 1985
       * }
       */
      metadata?: { [key: string]: unknown };
      /**
       * Format: ^\+?[1-9]\d{1,14}$
       * @description A phone number in E.164 number formatting.
       *
       * @example +4799999999
       */
      phone_number?: string;
      addresses?: (definitions["Address"] & {
        type?: string;
        custom_type?: string;
      })[];
      /**
       * @description Is customer required to pay tax
       *
       * @example false
       */
      pays_tax?: boolean;
      /**
       * Format: date
       * @example 1990-09-20
       */
      date_of_birth?: string;
      /** @description discribe where customers was recruit from */
      enrolled_by?: {
        /**
         * @description Enrollment type, e.g. `url`, `store`, `qr_code`, any string
         *
         * @example url
         */
        type?: string;
        /** @example https://facebook.com */
        value: string;
      };
      /** @description customer favorite store */
      favorite_store?: string;
      /** @description Company details, supported when type is Company */
      company?: {
        /**
         * @description Companys identification number
         * @example 123456789MVA
         */
        organization_number?: string;
        /** @example TKP tech AS */
        bussiness_name: string;
        /**
         * @description companys department
         * @example sales department
         */
        department?: string;
        /** @example computer industry */
        industry?: string;
        website?: string;
        number_of_employees?: string;
      };
      /** @description Customers consent for marketing in different channels */
      marketing_consent?: {
        sms?: {
          /** @example true */
          consent?: boolean;
          /**
           * Format: date-time
           * @description The date-time when the resource was last updated:
           *
           * @example 2018-01-12T13:42:00Z
           */
          updated_at?: string;
        };
        email?: {
          /** @example true */
          consent?: boolean;
          /**
           * Format: date-time
           * @description The date-time when the resource was last updated:
           *
           * @example 2018-01-12T13:42:00Z
           */
          updated_at?: string;
        };
      };
      /** @description Status of the customer */
      status?: string;
      /** @description The term and condition accepted by the customer */
      term?: {
        id?: string;
      };
      /**
       * @description Describe type of an customer.
       * Company only allowed to be set when the type is "Company"
       *
       * @enum {string}
       */
      type?: "customer" | "company" | "contact" | "employee" | "other";
      /** @description Token used to identify the customer */
      token?: {
        /**
         * @description Id of token identifying the customer
         *
         * @example 983558fe-05bd-495f-92b5-9075d085db32
         */
        token_id?: string;
        /**
         * @description Token value that combined with type
         * was used to identify the customer
         *
         * @example 5345346544ffea22
         */
        value?: string;
        /**
         * @description The token issuer
         * @example VIPPS
         */
        type?: string;
      };
    };
    /**
     * @description Monetary amount in smallest unit for the currency
     * before discounts
     *
     * @example 59800
     */
    gross_amount?: number;
    /**
     * @description Monetary amount in smallest unit for the currency
     * before discounts with decimal
     *
     * @example 59800.01
     */
    gross_amount_dwh?: string;
    /**
     * @description Monetary amount in smallest unit for the currency
     * after discounts
     *
     * @example 47840
     */
    net_amount?: number;
    /**
     * @description Monetary value in smallest unit for the currency after discounts with decimal
     * @example 47840.01
     */
    net_amount_dwh?: string;
    /** @example 100 */
    round_off_to_coin?: number;
    /**
     * @description The three-character ISO-4217 currency.
     * https://en.wikipedia.org/wiki/ISO_4217
     *
     * @example NOK
     */
    currency?: string;
    /**
     * Format: date-time
     * @description The date and time for the receipt purchase
     */
    purchase_at: string;
    /** @example order12345 */
    order_number?: string;
    /** Format: date-time */
    transaction_date?: string;
    /**
     * @description How much more need to be paid before the
     * transaction is completed.
     * Monetary amount in smallest unit for the currency
     *
     * @example 2050
     */
    amount_due?: number;
    /**
     * @description Monetary value with decimal
     * @example 2050.10
     */
    amount_due_dwh?: string;
    /**
     * @description How many items did the customer buy
     *
     * @example 4
     */
    no_of_items?: number;
    /** @description Discount applied to gross amount */
    is_changed?: boolean;
    /** @example SC999-9991-1828 */
    transaction_id?: string;
    /** @example 0 */
    total_discount?: number;
    /**
     * @description Monetary amount in smallest unit for the currency
     *
     * @example 0
     */
    total_manual_discount_amount?: number;
    /** @example 0 */
    total_manual_percentage_discount?: number;
    /**
     * @description POS user
     * @example 000210
     */
    operator_id?: string;
    /**
     * @description Name of the POS user
     * @example Ole Anders
     */
    operator_name?: string;
    /**
     * @description ID of the POS user
     * @example 000111
     */
    salesperson_id?: string;
    /** @example Jesper */
    salesperson_name?: string;
    /**
     * @description Status for the transaction
     * @enum {string}
     */
    entry_status?:
      | "None"
      | "Voided"
      | "Posted"
      | "Concluded"
      | "Cancelled"
      | "OnHold"
      | "Training";
    /** @example Kunden ønsker mer for info */
    comment?: string;
    /**
     * @description Breakdown of the tax to different
     * tax groups
     */
    tax_lines?: definitions["TaxItem"][];
    payments?: definitions["PaymentItem"][];
    infocode_items?: definitions["InfoCodeItem"][];
    receipt_text?: string;
    discount_code?: string[];
    extra_info?: definitions["ExtraInfo"][];
  };
  Claim: definitions["Entity"] & {
    /**
     * @description an external reference for the claim. Must be unique
     * for the claim, reuse of ref will result in conflict
     *
     * @example transactionid1
     */
    ref?: string;
    /**
     * @description an external type for the claim
     *
     * @example pos
     */
    type?: string;
    /**
     * Format: date-time
     * @description The date and time for the purchase the
     * claim is done for.
     */
    purchase_at: string;
    /**
     * @description The customer id you have defined for the customer.
     * (must not have trailing or leading spaces)
     */
    customer_id: string;
    /** @description Discounts to claim */
    discounts: {
      /** @description Discount ID */
      id: string;
      /** @description Customer reference to the discount */
      refs: {
        /**
         * @description reference id to the customer instance of
         * the discount
         */
        id: string;
        /** @description the amount for the ref to be claimed */
        amount: number;
        /**
         * @description number of times the ref should be claimed
         * @example 1
         */
        usage: number;
      }[];
    }[];
  };
  /** @description Discount Campaign */
  Campaign: definitions["Entity"] & {
    campaign_id?: string;
    name: string;
    description?: string;
    /**
     * @description The campaign is private and will be excluded from public rules
     * when filtered by campaign_id
     *
     * [GET /discounts/public/rules](#operation/aid_discounts_public_get)
     *
     * @default false
     */
    private?: boolean;
    /**
     * @description Additional metadata about the campaign
     *
     * @example {
     *   "sponsor": "Solo",
     *   "is_featured": true
     * }
     */
    metadata?: { [key: string]: unknown };
  };
  Statistics: {
    statistics?: {
      /** @description total stamp collected */
      stamp?: number;
      /**
       * @description **deprecated** number of times the discount has been used
       *
       * @example 28
       */
      used?: number;
      /**
       * @description number of times the discount has been used
       * @example 28
       */
      usage?: number;
      /**
       * @description total reward given
       * @example 280000
       */
      amount?: number;
      /**
       * @description the discount debit balance, only applicable if
       * discount reward type is `discount_debit`
       *
       * @example 12350
       */
      debit_balance?: number;
    };
  };
  CustomerDiscountStatistics: definitions["Statistics"] & {
    statistics?: {
      /** @description stamps collected since last usage, excluding expired stamps */
      current_stamp?: number;
    };
  };
  UsageRefWrite: {
    /** @example fe35e8ed-3fd3-4b04-acdd-6f1d7d7ca7c9 */
    ref: string;
    /** @example receipt_add */
    ref_type: string;
    /** @example 1 */
    usage?: number;
    /** @example 4 */
    stamp?: number;
    /** @example 12000 */
    amount?: number;
  };
  Event: {
    receipt?: {
      /** @description An ID that uniquely identifies the receipt */
      id?: string;
    } & definitions["Receipt"] & {
        id: unknown;
        customer_id: unknown;
      };
    token?: {
      /**
       * @description The token id you have defined for the token.
       * (must not have trailing or leading spaces)
       */
      token_id: string;
      /**
       * @description identifies how or who is resposible for the token value
       * @example sha1:email
       */
      type: string;
      /** @example a1b79ef1a62d94ffa86b3f3d846df0ee3993af92 */
      value: string;
      /**
       * @description The customer id you have defined as owner of the token
       * (must not have trailing or leading spaces)
       */
      customer_id: string;
    };
  };
  UsageRef: definitions["UsageRefWrite"] & {
    /** Format: date-time */
    created_at?: string;
    created_by?: string;
  };
  DiscountUsage: {
    id?: string;
    ref_id?: string;
    discount_id?: string;
    customer_id?: string;
    /** Format: date-time */
    create_at?: string;
    /** Format: date-time */
    updated_at?: string;
    created_by?: string;
    usage_refs?: definitions["UsageRef"][];
  } & definitions["CustomerDiscountStatistics"];
}

export interface parameters {
  /**
   * Format: ^[PT]{1}\d{8}$
   * @description An id that uniquely identifies the account.
   */
  accountId: string;
  /**
   * @description A limit on the number of objects to be returned. Limit can range
   * between 1 and 100 items, and the default is 10 items.
   *
   * @default 10
   */
  limit: number;
  /**
   * @description cursor for use in pagination. starting_after is an object ID
   * that defines your place in the list. For instance, if you make
   * a list request and receive 100 objects, end the result contains
   *   `paging_token=pt1`, your subsequent call can include
   * `starting_after=pt1` in order to fetch the next page of the list.
   */
  startingAfter: string;
  /**
   * @description include `total-count` header in the response
   *
   * @default false
   */
  total: boolean;
  /**
   * @description The customer id you have defined for the customer.
   * (must not have trailing or leading spaces)
   */
  customerId: string;
  /**
   * Format: uuid
   * @description An UUID that uniquely identifies the discount
   */
  discountId: string;
}

export interface responses {
  /** Bad / Invalid request */
  BadRequest: {
    schema: definitions["Error"];
  };
  /** Access forbidden, invalid JWT token was used */
  AccessForbidden: {
    schema: definitions["Error"];
  };
  /** Forbidden */
  Forbidden: {
    schema: definitions["Error"];
  };
  /** Unexpected Error */
  ServerError: {
    schema: definitions["Error"];
  };
  /** Resource was not found */
  NotFound: {
    schema: definitions["Error"];
  };
}

export interface operations {
  /**
   * Get available automations for the account
   *
   * scopes:
   * - admin:automations
   * - read:automations
   */
  aid_automations_rules_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      query: {
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
        /** Indicate the state of the automation to return */
        state?: "all" | "available" | "deleted";
      };
    };
    responses: {
      /** Automation collection */
      200: {
        schema: (definitions["Entity"] & definitions["Automation"])[];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Create a discount automation to apply on events received.
   *
   *
   * A automation can be used to automate the task of
   * giving discount to customers. The customer found in
   * the event will receive the discount.
   *
   * ###
   * Welcome discount: give discount to new user
   *
   *     {
   *       "requirement": {
   *         "events": ["customer_add"],
   *         "automation_from": "2018-05-07T08:54:31Z",
   *         "automation_to": "2018-06-07T08:54:31Z"
   *       },
   *       "actions": [
   *         {
   *           "type": "discount",
   *           "id": "cae3e485-0e15-4afa-bc66-472f843efb84"
   *         }
   *       ]
   *     }
   *
   * ###
   * Purchase discount: give discount on first purchase at store
   *
   *     {
   *       "name": "purchase at store sc029",
   *       "requirement": {
   *         "events": ["receipt_add"],
   *         "automation_from": "2018-05-07T08:54:31Z",
   *         "automation_to": "2018-06-07T08:54:31Z",
   *         "filters": {
   *           "$.store.id": ["sc029"]
   *         }
   *       },
   *       "actions": [
   *         {
   *           "type": "discount",
   *           "id": "cae3e485-0e15-4afa-bc66-472f843efb84"
   *         }
   *       ],
   *       "limitation": {
   *         "automation_repeat": 1
   *       }
   *     }
   *
   * scopes:
   * - admin:automations
   * - write:automations
   */
  aid_automations_rules_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      body: {
        /** Automation to create */
        data: definitions["Automation"];
      };
    };
    responses: {
      /** Automation created */
      200: {
        schema: definitions["Entity"] & definitions["Automation"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get details about an automations
   *
   * scopes:
   * - admin:automations
   * - read:automations
   */
  aid_automations_rules_rid_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An UUID that uniquely identifies the automation */
        arid: string;
      };
    };
    responses: {
      /** Automation collection */
      200: {
        schema: definitions["Entity"] & definitions["Automation"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Delete an automation rule.
   *
   * scopes:
   * - admin:automations
   * - write:automations
   */
  aid_automations_rules_rid_delete: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An UUID that uniquely identifies the automation */
        arid: string;
      };
    };
    responses: {
      /** Automation deleted */
      200: {
        schema: definitions["Entity"] & definitions["Automation"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Find discounts available for the receipt
   *
   * ### Active discounts
   *
   * - `customer_id` will be used to find active discounts for the purchase.
   * - `customer.token` will be used to resolve `customer_id` if no `customer_id` is provided.
   * - No discounts will be given if the token does not resolve to any customer_id.
   * - A receipt with no `customer_id` and no `customer.token` will only be applicable for
   *   active discounts given to **`/`**
   *   ([see](#operation/aid_discounts_did_customers_post))
   *
   * ### Requirement of the receipt
   *
   *   - all items must have `eligible_for_discount` set to enable for discount
   *   - all items must have a positive `gross_amount` to qualify for discount
   *   - a `net` base discount reward requires the receipt to include existing
   *     discounts as discount_lines (on item) in order to calculate net
   *
   * A receipt that qualified for discount will have the `is_change`
   * property set to true. Any items that has received a discount will be
   * flagged by `is_change` and have one or more new entries to its
   * discount_lines.
   *
   * The receipt `discounts` list will be populated with all discounts the
   * receipt is qualified to receive
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   * - write:discounts:/available_for_receipt
   */
  aid_discounts_available_for_receipt_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      body: {
        /** receipt */
        data: definitions["Receipt"];
      };
    };
    responses: {
      /** Receipt with discount */
      200: {
        schema: definitions["Receipt"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get all claims, limited by parameters. The result will
   * match all parameters with `AND`
   *
   * scopes:
   * - admin:discounts
   * - read:discounts
   * - read:discounts:/available_for_receipt
   */
  aid_discounts_available_for_receipt_get_claims: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      query: {
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
        /** filter claims by ref */
        ref?: string;
        /** filter claims by customer_id */
        customer_id?: string;
        /** include `total-count` header in the response */
        total?: parameters["total"];
      };
    };
    responses: {
      /** Claim collection */
      200: {
        headers: {};
        schema: definitions["Claim"][];
      };
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Claim discount rewards, checks will be done to ensure that all
   * discount limitation are uphold
   *
   * Note, only the following discount limitation will affect
   * the success of a claim
   *
   *   - discount_reward_usage
   *   - discount_repeat_usage
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   * - write:discounts:/available_for_receipt
   */
  aid_discounts_available_for_receipt_post_claim: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      body: {
        /** discounts to claim */
        data: definitions["Claim"];
      };
    };
    responses: {
      /** claim accepted */
      200: {
        schema: definitions["Claim"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get details about a claim
   *
   * scopes:
   * - admin:discounts
   * - read:discounts
   * - read:discounts:/available_for_receipt
   */
  aid_discounts_available_for_receipt_get_claim: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** A string that uniquely identifies claim */
        claim_id: string;
      };
    };
    responses: {
      /** claim details */
      200: {
        schema: definitions["Claim"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Release claim on discounts, revert previously claimed discount
   * and make them available for future purchase
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   * - write:discounts:/available_for_receipt
   */
  aid_discounts_available_for_receipt_delete_claim: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** A string that uniquely identifies claim */
        claim_id: string;
      };
    };
    responses: {
      /** claim deleted */
      200: {
        schema: definitions["Claim"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * List campaigns
   *
   * scopes:
   * - admin:discounts
   * - read:discounts
   */
  aid_discounts_campaigns_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      query: {
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
        /** Indicate the state of the campaign to return */
        state?: "all" | "public" | "private" | "deleted";
      };
    };
    responses: {
      /** Campaign collection */
      200: {
        schema: definitions["Campaign"][];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Create a new campaign to group discount rules
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_campaigns_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      body: {
        /** Campaign to create */
        data: definitions["Campaign"];
      };
    };
    responses: {
      /** Campaign created */
      200: {
        schema: definitions["Campaign"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get more details about a campaign
   *
   * scopes:
   * - admin:discounts
   * - read:discounts
   */
  aid_discounts_campaigns_campaign_id_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        campaign_id: string;
      };
    };
    responses: {
      /** Campaign */
      200: {
        schema: definitions["Campaign"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Update campaign details. Undeletes a deleted campaign.
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_campaigns_campaign_id_put: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        campaign_id: string;
      };
      body: {
        /** Campaign properties to update */
        data: {
          name?: string;
          description?: string;
          /**
           * @description The campaign is private and will be excluded from public rules
           * when filtered by campaign_id
           *
           * [GET /discounts/public/rules](#operation/aid_discounts_public_get)
           */
          private?: unknown;
        };
      };
    };
    responses: {
      /** Campaign Updated */
      200: {
        schema: definitions["Campaign"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Delete a campagn.
   *
   * Deleting a campagn does not affect its discount rules. i.e. active
   * campagn rules will continue to be active after deleting the campagn
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_campaigns_campaign_id_delete: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        campaign_id: string;
      };
    };
    responses: {
      /** Campaign deleted */
      200: {
        schema: definitions["Campaign"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get a customer discount ref.
   * scopes:
   * - admin:discounts
   * - read:discounts
   */
  aid_discounts_customer_cid_get_ref_id: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /**
         * The customer id you have defined for the customer.
         * (must not have trailing or leading spaces)
         */
        customer_id: parameters["customerId"];
        /** A string that uniquely identifies a customer discount reference */
        ref_id: string;
      };
    };
    responses: {
      /** Discount ref */
      200: {
        schema: definitions["Discount"] &
          definitions["CustomerDiscountStatistics"] & {
            /**
             * @description customer reference to the discount, a customer may have multiple
             * references to a discount (discount given to customer multiple times)
             */
            ref_id?: string;
          };
      };
      /** Discount ref already deleted */
      400: {
        schema: definitions["Error"];
      };
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      /** Discount ref not found */
      404: {
        schema: definitions["Error"];
      };
      500: responses["ServerError"];
    };
  };
  /**
   * Add stamps and usage to a discount ref.
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_customer_cid_post_ref_id: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /**
         * The customer id you have defined for the customer.
         * (must not have trailing or leading spaces)
         */
        customer_id: parameters["customerId"];
        /** A string that uniquely identifies a customer discount reference */
        ref_id: string;
      };
      body: {
        /** update usage, stamps and amount */
        update: {
          usage_ref?: definitions["UsageRefWrite"];
        };
      };
    };
    responses: {
      /** Discount ref updated */
      200: {
        schema: definitions["Discount"] &
          definitions["Statistics"] & {
            /**
             * @description customer reference to the discount, a customer may have multiple
             * references to a discount (discount given to customer multiple times)
             */
            ref_id?: string;
          };
      };
      /** Update invalid */
      400: {
        schema: definitions["Error"];
      };
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      /** Discount ref not found */
      404: {
        schema: definitions["Error"];
      };
      500: responses["ServerError"];
    };
  };
  /**
   * Delete a customer discount ref. The discount will no longer
   * be available on purchase ([Post receipt for discount](#operation/aid_discounts_available_for_receipt_post))
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_customer_cid_delete_ref_id: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /**
         * The customer id you have defined for the customer.
         * (must not have trailing or leading spaces)
         */
        customer_id: parameters["customerId"];
        /** A string that uniquely identifies a customer discount reference */
        ref_id: string;
      };
    };
    responses: {
      /** Discount ref deleted */
      200: {
        schema: definitions["Discount"] &
          definitions["Statistics"] & {
            /**
             * @description customer reference to the discount, a customer may have multiple
             * references to a discount (discount given to customer multiple times)
             */
            ref_id?: string;
            /**
             * @description **deprecated** The debit balance, only set if the discount reward
             * type is `discount_debit`. The balance is the amount
             * vailable for discount on a future purchase. Inital value
             * is the discount reward value.
             */
            debit_balance?: number;
          };
      };
      /** Discount ref already deleted */
      400: {
        schema: definitions["Error"];
      };
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      /** Discount ref not found */
      404: {
        schema: definitions["Error"];
      };
      500: responses["ServerError"];
    };
  };
  /**
   * Get all discounts available for a customer, result will exclude
   * expired and inactive discounts
   *
   *
   * Expired discounts are:
   *
   *   - discount used up (customer has allready used it) and there
   *     was a limitation on the discount that prevents more use.
   *   - discount requirement purchase periode is in the past
   *   - discount that has been deleted
   *
   * Inactive discounts are:
   *
   *   - discount with `active` property set to false.
   *
   * Use value of `ref_id` as parameter value of `starting_after`
   *
   * scopes:
   * - admin:discounts
   * - read:discounts
   * - user:discounts
   */
  aid_discounts_customer_cid_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /**
         * The customer id you have defined for the customer.
         * (must not have trailing or leading spaces)
         */
        customer_id: parameters["customerId"];
      };
      query: {
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
      };
    };
    responses: {
      /** Customer discount collection */
      200: {
        schema: (definitions["Discount"] &
          definitions["CustomerDiscountStatistics"] & {
            /**
             * @description customer reference to the discount, a customer may have multiple
             * references to a discount (discount given to customer multiple times)
             */
            ref_id?: string;
          })[];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Send an Event to the service.
   *
   * - rules automations will receive the event and give
   *   its discount to the customer found in the event
   *
   *
   * - Token received will be stored to support resolving
   *   customer from token when handling discounts available
   *   for receipt
   *
   *   scopes:
   *   - admin:discounts
   *   - write:discounts
   *   - write:discounts:/events
   */
  aid_discounts_events_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      header: {
        /** The event type that was sent */
        event: "token_add" | "token_remove" | "receipt_add";
        /**
         * UUID to identify the payload and event
         * being sent.
         */
        "event-delivery": string;
      };
      body: {
        /** The event payload, e.g. a Customer, Receipt or Token */
        data: definitions["Event"];
      };
    };
    responses: {
      /** Event processed */
      204: never;
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get all discounts available for any customer given
   * current date, result will exclude expired and inactive
   * discounts
   *
   * Use value of `ref_id` as parameter value of `starting_after`
   *
   * scopes:
   * - admin:discounts
   * - read:discounts
   * - public:discounts
   */
  aid_discounts_public_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      query: {
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
        /**
         * List rules available for purchase where no customer id is
         * provided.
         */
        no_customer_id?: boolean;
        campaign_id?: string[];
      };
    };
    responses: {
      /** Public Discount collection */
      200: {
        schema: (definitions["Discount"] & {
          /**
           * @description public reference to the discount, a public
           * discount may be given to all customer several times
           */
          ref_id?: string;
        })[];
      };
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * List discounts available for the account
   * scopes:
   * - admin:discounts
   * - read:discounts
   */
  aid_discounts_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      query: {
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
        /**
         * Only discounts added/updated/delete at or after this time is returned.
         * NOTE: this parameter can't be combined with `starting_after` parameter.
         * Retrieve next page by updating since_datetime to the latest
         * updated_at value found in the result.
         */
        since_datetime?: string;
        /** Only discounts with requirement purchase_from at or after this time is returned. */
        purchase_from?: string;
        /** Only discounts with requirement purchase_to at or before this time is returned. */
        purchase_to?: string;
        /** Indicate the state of the discounts to return */
        state?: "all" | "available" | "deleted" | "inactive";
        campaign_id?: string[];
        /** Additional fields to include for each discount */
        include?: "statistics"[];
      };
    };
    responses: {
      /** Discount collection */
      200: {
        schema: (definitions["Discount"] & definitions["Statistics"])[];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Create a new discount for an account.
   *
   * A new discount will be **unavailable** for purchases
   * until the discount is given to one or more customer.
   *
   * Discount can be given to a customer by either adding
   * a automation to the discount that will grant the
   * discount to the customer from events received or by
   * adding customers to the discount.
   *
   * See [Discount Examples](#section/Discount-Examples)
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      body: {
        /** Discount to create */
        data: definitions["Discount"];
      };
    };
    responses: {
      /** Discount created */
      200: {
        schema: definitions["Discount"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get more details about a discount, includes statistics
   * about the discount
   * scopes:
   * - admin:discounts
   * - read:discounts
   */
  aid_discounts_did_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An UUID that uniquely identifies the discount */
        did: parameters["discountId"];
      };
    };
    responses: {
      /** Discount */
      200: {
        schema: definitions["Discount"] & definitions["Statistics"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Update discount details.
   *
   *
   * **Caution**: Update of non-meta properties, properties that
   * changes requirement or limitation can create conflict with
   * the usage history of the discount.
   *
   * Example is to change requirement.item.items, such change would
   * mean that purchases before the change would not be correcly
   * rewarded given the new version of the discount.
   *
   * We recomment to limit the update of a discount to meta only
   * properties if the discount has previously been used in a
   * purchase.
   *
   * Update on requirement `purchase_to` is only supported when
   * the new value that is after current value.
   *
   * Update of requirement `purchase_from` and `reward` is not supported.
   *
   * Update `discount.active` to toggle if an discount is active
   * and available for purchase.
   *
   * Update `discount.private` to toggle if an discount is included
   * in public discount collection if given to all customers
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_did_put: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An UUID that uniquely identifies the discount */
        did: parameters["discountId"];
      };
      body: {
        /** Discount properties to update */
        data: {
          /**
           * @description The campaign the rule belongs to, use `null` to remove
           * the rule from the campaign.
           */
          campaign_id?: unknown;
          /**
           * @description the discount is active and can be available
           * for purchase
           *
           * @default true
           */
          active?: boolean;
          /**
           * @description the discount is private and will not be included in
           * public discount collection
           *
           * @example false
           */
          private?: boolean;
          links?: definitions["Links"];
          limitation?: definitions["Limitation"];
          requirement?: definitions["BaseRequirement"] & {
            /**
             * Format: date-time
             * @description New value must be after current
             */
            purchase_to?: string;
          };
          /** @example Gjør et Stablestol kupp! */
          description?: string;
          /**
           * @description Additional metadata about the discount
           *
           * @example {
           *   "campaign_id": "V101",
           *   "is_featured": true
           * }
           */
          metadata?: { [key: string]: unknown };
          /** @example Spar 100,- */
          name?: string;
          /**
           * @description Text that should be used when displaying
           * the discount, e.g. on receipt
           *
           * @example Mai Salg
           */
          receipt_text?: string;
        };
      };
    };
    responses: {
      /** Discount Updated */
      200: {
        schema: definitions["Discount"] & definitions["Statistics"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Delete a discount
   *
   * - Customer that has previously received the discount will not
   *   be able to use it on purchases.
   * - rules automations belonging to the discount will be deleted
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_did_delete: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An UUID that uniquely identifies the discount */
        did: parameters["discountId"];
      };
    };
    responses: {
      /** Discount deleted */
      200: {
        schema: definitions["Statistics"] & definitions["Discount"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get list of customers refs for a discount. A ref is an instant
   * of discount given to a customer or `all customers`. See
   * [Add customers](#operation/aid_discounts_did_customers_post)
   *
   * scopes:
   * - admin:discounts
   * - read:discounts
   */
  aid_discounts_did_customers_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An UUID that uniquely identifies the discount */
        did: parameters["discountId"];
      };
      query: {
        /**
         * A limit on the number of refs to be returned. Limit can range
         * between 1 and 1000, the default is 10 items.
         */
        limit?: number;
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
        /**
         * limit by state of customer ref, note, a customer ref will continue to be active after the discount has been deleted.
         * Use state `inactive` to list all discount where active is set to false.
         */
        state?: "all" | "available" | "deleted" | "inactive";
      };
    };
    responses: {
      /** Discount customers (refs) */
      200: {
        schema: (definitions["Entity"] & {
          /**
           * @description customer id for the ref. The customer_id will be
           * null if the ref originated from giving the discount to
           * all customers (wilcard '**`*`**')
           */
          customer_id?: string;
        })[];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Give the Discount to one or more customers
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_did_customers_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An UUID that uniquely identifies the discount */
        did: parameters["discountId"];
      };
      body: {
        /** Customers to give the discount to */
        data: {
          /**
           * @description Use the `offering_constraint_id` to limit customers
           * to only receive the discount once for a given `offering_constraint_id` value.
           * i.e. a customer that is given the same discounts in multiple requests
           * with the same offering_constraint_id will only have one discount available.
           *
           * @example stamp-2020
           */
          offering_constraint_id?: string;
          /**
           * @description Array of customer IDs (must not have trailing or leading spaces)
           *
           * Following values are reserved:
           *
           * - **`*`** give the discount to purchase with *any `customer_id`*.
           * - **`/`** give the discount to purchase with *no `customer_id`*.
           */
          customers: string[];
        };
      };
    };
    responses: {
      /** Discount added to customers */
      200: {
        schema: definitions["Statistics"] & definitions["Discount"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Remove Discount from one or more customers
   *
   * scopes:
   * - admin:discounts
   * - write:discounts
   */
  aid_discounts_did_customers_delete: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An UUID that uniquely identifies the discount */
        did: parameters["discountId"];
      };
      body: {
        /**
         * Customers to give the discount to
         * ###
         * Use value '**`*`**' to remove the discounts from all customers
         * ###
         */
        data: {
          customers: string[];
        };
      };
    };
    responses: {
      /** Discount deleted from customers */
      200: {
        schema: definitions["Statistics"] & definitions["Discount"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get list of discount refs usages.
   * scopes:
   * - admin:discounts
   * - read:discounts
   */
  aid_discounts_did_usages_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An UUID that uniquely identifies the discount */
        did: parameters["discountId"];
      };
      query: {
        /**
         * A limit on the number of refs to be returned. Limit can range
         * between 1 and 1000, the default is 10 items.
         */
        limit?: number;
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
      };
    };
    responses: {
      /** Discount usages */
      200: {
        schema: definitions["DiscountUsage"][];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Search for active discounts given current date matching queries
   *
   * scopes:
   * - admin:discounts
   * - read:discounts
   */
  aid_discounts_rules_search_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      query: {
        /** A limit on the number of objects to be returned */
        limit?: number;
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
      };
      body: {
        search?: {
          /** @description Filter to use when searching for matching rules */
          query: {
            /** @description Match rules that have match on customer_id */
            customer_id: string[];
            /** @description Match rules that have match on any items */
            "$.requirement.item.items[*]": definitions["Item"][];
          }[];
          group_by: (
            | "customer_id#$.requirement.item.items[*].id"
            | "customer_id#$.requirement.item.items[*].group_id"
          )[];
          /**
           * @description Select the properties from matching discount rules to include
           * in the result data
           */
          includes?: (
            | "$.campaign_id"
            | "$.created_at"
            | "$.created_by"
            | "$.description"
            | "$.id"
            | "$.limitation"
            | "$.links"
            | "$.metadata"
            | "$.name"
            | "$.private"
            | "$.receipt_text"
            | "$.requirement"
            | "$.reward"
            | "$.type"
            | "$.updated_at"
            | "$.updated_by"
            | "$.visible_from"
          )[];
        };
      };
    };
    responses: {
      /** Search result */
      200: {
        schema: {
          /** @description cursor to next page */
          starting_after?: string;
          data?: {
            /** @enum {string} */
            group_by?:
              | "$.requirement.item.items[*].id"
              | "$.requirement.item.items[*].group_id";
            /** @example b714118 */
            group_value?: string;
            customer_id?: string;
            /** @example B1 */
            id?: string;
            /** @example b714118 */
            group_id?: string;
            /**
             * @description The data picked from discount rule using the includes
             * @example {
             *   "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
             *   "name": "Spar 10%",
             *   "receipt_text": "Mai Salg",
             *   "reward": {
             *     "type": "discount_percent",
             *     "value": 10
             *   }
             * }
             */
            rule?: { [key: string]: unknown };
          }[];
        } & {
          results: unknown;
        };
      };
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
}

export interface external {}
