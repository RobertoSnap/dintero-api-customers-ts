/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accounts/{aid}/products/catalogs": {
    /**
     * Get catalogs from account based on query parameters
     *
     * scopes:
     *   - admin:products
     *   - write:products
     *   - read:products
     */
    get: operations["aid_catalogs_get"];
    /**
     * Create a new product catalog
     *
     * scopes:
     *   - admin:products
     *   - write:products
     */
    post: operations["aid_catalogs_post"];
  };
  "/accounts/{aid}/products/catalogs/{catalog_id}": {
    /**
     * Update an existing catalog
     *
     * scopes:
     *   - admin:products
     *   - write:products
     */
    put: operations["aid_catalogs_put"];
    /**
     * Delete catalog and all corresponding products
     *
     * scopes:
     *   - admin:products
     *   - write:products
     */
    delete: operations["aid_catalogs_delete"];
  };
  "/accounts/{aid}/products/catalogs/{catalog_id}/products": {
    /**
     * Get products in a catalog based on query parameters
     *
     * scopes:
     *   - admin:products
     *   - write:products
     *   - read:products
     */
    get: operations["aid_products_get"];
    /**
     * Create a new product
     *
     * scopes:
     *   - admin:products
     *   - write:products
     */
    post: operations["aid_products_post"];
  };
  "/accounts/{aid}/products/catalogs/{catalog_id}/products/{product_id}": {
    /**
     * Update an existing product
     *
     * scopes:
     *   - admin:products
     *   - write:products
     */
    put: operations["aid_products_put"];
    /**
     * Delete product in a given catalog
     *
     * scopes:
     *   - admin:products
     *   - write:products
     */
    delete: operations["aid_catalog_id_product_delete"];
  };
  "/accounts/{aid}/products/groups": {
    /** Lists all groups */
    get: operations["aid_group_get"];
    /** Insert a new group */
    post: operations["aid_group_post"];
  };
  "/accounts/{aid}/products/groups/{group_id}": {
    /** Update an existing group */
    put: operations["aid_group_put"];
    /** Delete an existing group */
    delete: operations["aid_delete"];
  };
  "/accounts/{aid}/products/tax": {
    /** Lists all taxgroups */
    get: operations["aid_tax_get"];
    /** Insert a new taxgroup */
    post: operations["aid_tax_post"];
  };
  "/accounts/{aid}/products/tax/{tax_id}": {
    /** Update an existing taxgroup */
    put: operations["aid_tax_put"];
    /** Delete an existing taxgroup */
    delete: operations["aid_tax_delete"];
  };
}

export interface definitions {
  BatchResponse: {
    catalog?: (definitions["Entity"] & definitions["Catalog"])[];
    products?: definitions["Product"][];
  };
  Catalog: {
    /**
     * @description The id to define which catalog the product is a part of. An auto-generated ID will be created if not provided
     * @example S23
     */
    catalog_id?: string;
    /**
     * @description The catalog's name that will be shown customers
     *
     * @example Sommer
     */
    catalog_name?: string;
  };
  Entity: {
    /**
     * Format: uuid
     * @description An UUID that uniquely identifies the resource
     */
    id?: string;
    /**
     * Format: date-time
     * @description The date-time when the resource was created
     */
    created_at?: string;
    /**
     * @description The ID of the user/client created the resource
     *
     * @example 1c92f7e1-2897-4d46-bdcc-c127a914fb4e
     */
    created_by?: string;
    /**
     * Format: date-time
     * @description The date-time when the resource was last updated
     */
    updated_at?: string;
    /**
     * @description The ID of the user/client created the resource
     *
     * @example 1c92f7e1-2897-4d46-bdcc-c127a914fb4e
     */
    deleted_by?: string;
    /** Format: date-time */
    deleted_at?: string;
  };
  Error: {
    error: {
      /** @description The code used to identify the error/warning */
      code?: string;
      /** @description The nested error(s) encountered during validation */
      errors?: { [key: string]: unknown }[];
      /** @description The human readable description of the error/warning */
      message: string;
    };
  };
  /** @description Identify item attributes, such as size and color */
  Dimension: {
    color?: string;
    size?: string;
    style?: string;
    config?: string;
    variant?: string;
  };
  /**
   * @description Links to images of product
   * @example [
   *   {
   *     "href": "https://example.dintero.com/c/photos/2018/6_20_thumbnail_image.png",
   *     "rel": "thumbnail_image",
   *     "caption": "Image of current discount"
   *   },
   *   {
   *     "href": "https://example.dintero.com/c/photos/2018/6_20_medium_image.png",
   *     "rel": "medium_image"
   *   }
   * ]
   */
  Images: {
    /**
     * Format: uri
     * @description The URL of the link.
     */
    href: string;
    /** @description Describes the image */
    title?: string;
    /**
     * @description Specifies the relationship between the image and the link
     *
     * Following `rel` values are reserved for specific usage
     *
     *   - thumbnail_image: link to image
     *   - medium_image: link to image
     *   - large_image: link to image
     *   - webshop: link to site where the image may be used
     */
    rel?: string;
    /** @description Specifies the media type of the link */
    type?: string;
  }[];
  Location: {
    /**
     * @description The id you have defined for the sales location.
     * (must not have trailing or leading spaces).
     * An auto-generated location_id will be created if no location_id is provided
     */
    location_id?: string;
    /** @description The name that will be shown to customers */
    location_name?: string;
    /**
     * @description If true, the product is available for shipping
     *
     * @default true
     */
    is_available_for_shipping?: boolean;
    /**
     * @description If true, the product can be picked up at this location
     *
     * @default false
     */
    is_available_for_pickup?: boolean;
    /** @description Number of items currently in storage at this location */
    number_of_items_in_storage?: number;
  };
  Product: {
    /**
     * @description The products name which is shown to customers
     *
     * @example Stablestol
     */
    product_name?: string;
    /** @example Stablestol for utendørsbruk */
    description?: string;
    /** @default false */
    is_virtual_product?: boolean;
    /** @example 10900 */
    unit_gross_price?: number;
    /**
     * @description Unit type
     * @example stk
     */
    unit?: string;
    /**
     * @description The three-character ISO-4217 currency. https://en.wikipedia.org/wiki/ISO_4217
     *
     * @example NOK
     */
    currency?: string;
    /**
     * Format: date-time
     * @description The product will not be visible until this time
     */
    starting_at?: string;
    /**
     * Format: date-time
     * @description The product will not be visible after this time
     */
    stopping_at?: string;
    dimension?: definitions["Dimension"];
    images?: definitions["Images"];
    /**
     * @description All locations connected to the product
     *
     * @example [
     *   {
     *     "location_id": "SC_Oslo",
     *     "location_name": "SuperChain Oslo",
     *     "is_available_for_shipping": false,
     *     "is_available_for_pickup": true,
     *     "number_of_items_in_storage": 15
     *   },
     *   {
     *     "location_id": "SC_web",
     *     "location_name": "SuperChain Webshop",
     *     "is_available_for_shipping": true,
     *     "is_available_for_pickup": false,
     *     "number_of_items_in_storage": 500
     *   }
     * ]
     */
    locations?: definitions["Location"][];
  };
  ProductResponse: definitions["Entity"] &
    definitions["Product"] & {
      /**
       * @description The id to define the product. An auto-generated product_id will be created if no product_id is provided
       *
       * @example Stol22
       */
      product_id?: string;
      /**
       * @description The id to define which catalog the product is a part of. An auto-generated ID will be created if not provided
       * @example S23
       */
      catalog_id?: string;
      /**
       * @description Name of corresponding catalog
       *
       * @example Sommer
       */
      catalog_name?: string;
    };
  Group: {
    /**
     * @description group id
     * @example B1
     */
    group_id?: string;
    /**
     * @description Name of the group
     * @example Møbel
     */
    group_name?: string;
  };
  ProductPost: definitions["Product"] & {
    /**
     * @description The id to define the product. An auto-generated product_id will be created if no product_id is provided
     *
     * @example Stol22
     */
    product_id?: string;
    /**
     * @description Array containing relevant product groups and sub-groups to be upserted. New groups will be inserted, existing groups will be updated and deleted groups will be revived.
     *
     * @example [
     *   {
     *     "id": "B234",
     *     "name": "Stol"
     *   },
     *   {
     *     "id": "B1",
     *     "name": "Møbel"
     *   }
     * ]
     */
    groups?: ({
      /**
       * @description The id you have defined for the group (must not have training or leading spaces). An auto-generated group_id will be created if not provided
       *
       * @example b1
       */
      group_id?: string;
    } & definitions["Group"])[];
  };
  TaxGroup: {
    /**
     * @description The id you have defined for the taxgroup (must not have training or leading spaces). An auto-generated tax_id will be created if not provided
     *
     * @example vmva1
     */
    tax_id?: string;
    /**
     * @description The taxgroup name which is usually shown
     *
     * @example Vmva-høy
     */
    tax_group?: string;
    /** @example Taxgroup for food. Currently 12% */
    description?: string;
    /** @example 10000 */
    amount?: number;
    /** @example 12 */
    percentage?: number;
    /** @example 3 */
    tax_code?: string;
  };
}

export interface parameters {
  /**
   * Format: ^[PT]{1}\d{8}$
   * @description An id that uniquely identifies the account.
   */
  accountId: string;
  /**
   * @description A limit on the number of objects to be returned. Limit can range
   * between 1 and 100 items, and the default is 10 items.
   *
   * @default 10
   */
  limit: number;
  /**
   * @description cursor for use in pagination. starting_after is an object ID
   * that defines your place in the list. For instance, if you make
   * a list request and receive 100 objects, end the result contains
   *   `paging_token=pt1`, your subsequent call can include
   * `starting_after=pt1` in order to fetch the next page of the list.
   */
  startingAfter: string;
  /** @description An id that uniquely identifies the catalog. (must not have trailing or leading spaces) */
  catalogId: string;
  /** @description A string that uniquely identifies the product. (must not have trailing or leading spaces) */
  productId: string;
  /** @description Lookup on product name */
  product_name: string;
  /** @description A string that uniquely identifies the product. (must not have trailing or leading spaces) */
  product_id: string;
  /** @description A string that uniquely identifies the group. (must not have trailing or leading spaces) */
  group_id_query: string;
  /** @description A string that uniquely identifies the group. (must not have trailing or leading spaces) */
  groupId: string;
  /** @description A string that uniquely identifies the tax. (must not have trailing or leading spaces) */
  taxId: string;
}

export interface responses {
  /** Bad / Invalid request */
  BadRequest: {
    schema: definitions["Error"];
  };
  /** Access forbidden, invalid JWT token was used */
  AccessForbidden: {
    schema: definitions["Error"];
  };
  /** Forbidden */
  Forbidden: {
    schema: definitions["Error"];
  };
  /** Unexpected Error */
  ServerError: {
    schema: definitions["Error"];
  };
  /** Resource was not found */
  NotFound: {
    schema: definitions["Error"];
  };
}

export interface operations {
  /**
   * Get catalogs from account based on query parameters
   *
   * scopes:
   *   - admin:products
   *   - write:products
   *   - read:products
   */
  aid_catalogs_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      query: {
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
      };
    };
    responses: {
      /** Catalog collection */
      200: {
        schema: {
          catalogs?: (definitions["Catalog"] & definitions["Entity"])[];
          starting_after?: string;
        };
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Create a new product catalog
   *
   * scopes:
   *   - admin:products
   *   - write:products
   */
  aid_catalogs_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      body: {
        /** catalogs */
        data: {
          /**
           * @description The id you have defined for the catalog.
           * (must not have trailing or leading spaces). An
           * auto-generated catalog_id will be created if no catalog_id
           * is provided
           *
           * @example SK33
           */
          catalog_id?: string;
        } & definitions["Catalog"];
      };
    };
    responses: {
      /** Catalog created */
      200: {
        schema: definitions["Entity"] & definitions["Catalog"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Update an existing catalog
   *
   * scopes:
   *   - admin:products
   *   - write:products
   */
  aid_catalogs_put: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An id that uniquely identifies the catalog. (must not have trailing or leading spaces) */
        catalog_id: parameters["catalogId"];
      };
      body: {
        /** catalog */
        data: definitions["Catalog"];
      };
    };
    responses: {
      /** Catalog updated */
      200: {
        schema: definitions["Entity"] & definitions["Catalog"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Delete catalog and all corresponding products
   *
   * scopes:
   *   - admin:products
   *   - write:products
   */
  aid_catalogs_delete: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An id that uniquely identifies the catalog. (must not have trailing or leading spaces) */
        catalog_id: parameters["catalogId"];
      };
    };
    responses: {
      /** Catalog deleted */
      200: {
        schema: definitions["Entity"] & definitions["Catalog"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Get products in a catalog based on query parameters
   *
   * scopes:
   *   - admin:products
   *   - write:products
   *   - read:products
   */
  aid_products_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An id that uniquely identifies the catalog. (must not have trailing or leading spaces) */
        catalog_id: parameters["catalogId"];
      };
      query: {
        /** A string that uniquely identifies the product. (must not have trailing or leading spaces) */
        product_id?: parameters["productId"];
        /** Lookup on product name */
        product_name?: parameters["product_name"];
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
      };
    };
    responses: {
      /** Product collection */
      200: {
        schema: {
          products?: (definitions["ProductResponse"] & {
            groups?: definitions["Group"][];
          })[];
          starting_after?: string;
        };
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Create a new product
   *
   * scopes:
   *   - admin:products
   *   - write:products
   */
  aid_products_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An id that uniquely identifies the catalog. (must not have trailing or leading spaces) */
        catalog_id: parameters["catalogId"];
      };
      body: {
        /** product to create */
        data: definitions["ProductPost"];
      };
    };
    responses: {
      /** Product created */
      200: {
        schema: definitions["ProductResponse"] & {
          groups?: definitions["Group"][];
        };
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /**
   * Update an existing product
   *
   * scopes:
   *   - admin:products
   *   - write:products
   */
  aid_products_put: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An id that uniquely identifies the catalog. (must not have trailing or leading spaces) */
        catalog_id: parameters["catalogId"];
        /** A string that uniquely identifies the product. (must not have trailing or leading spaces) */
        product_id: parameters["product_id"];
      };
      body: {
        /** products */
        data: definitions["Product"];
      };
    };
    responses: {
      /** Product updated */
      200: {
        schema: definitions["ProductResponse"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /**
   * Delete product in a given catalog
   *
   * scopes:
   *   - admin:products
   *   - write:products
   */
  aid_catalog_id_product_delete: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** An id that uniquely identifies the catalog. (must not have trailing or leading spaces) */
        catalog_id: parameters["catalogId"];
        /** A string that uniquely identifies the product. (must not have trailing or leading spaces) */
        product_id: parameters["product_id"];
      };
    };
    responses: {
      /** Product deleted */
      200: {
        schema: definitions["ProductResponse"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      404: responses["NotFound"];
      500: responses["ServerError"];
    };
  };
  /** Lists all groups */
  aid_group_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      query: {
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
        /** A string that uniquely identifies the group. (must not have trailing or leading spaces) */
        group_id?: parameters["group_id_query"];
      };
    };
    responses: {
      /** Group collection */
      200: {
        schema: {
          groups?: (definitions["Entity"] & definitions["Group"])[];
          starting_after?: string;
        };
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /** Insert a new group */
  aid_group_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      body: {
        /** group */
        data: {
          /**
           * @description The id you have defined for the group (must not have training or leading spaces). An auto-generated group_id will be created if not provided
           *
           * @example b1
           */
          group_id?: string;
        } & definitions["Group"];
      };
    };
    responses: {
      /** Group created */
      200: {
        schema: definitions["Entity"] & definitions["Group"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /** Update an existing group */
  aid_group_put: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** A string that uniquely identifies the group. (must not have trailing or leading spaces) */
        group_id: parameters["groupId"];
      };
      body: {
        /** group */
        data: definitions["Group"];
      };
    };
    responses: {
      /** Group updated */
      200: {
        schema: definitions["Entity"] & definitions["Group"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /** Delete an existing group */
  aid_delete: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** A string that uniquely identifies the group. (must not have trailing or leading spaces) */
        group_id: parameters["groupId"];
      };
    };
    responses: {
      /** Group deleted */
      200: {
        schema: definitions["Entity"] & definitions["Group"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /** Lists all taxgroups */
  aid_tax_get: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      query: {
        /**
         * A limit on the number of objects to be returned. Limit can range
         * between 1 and 100 items, and the default is 10 items.
         */
        limit?: parameters["limit"];
        /**
         * cursor for use in pagination. starting_after is an object ID
         * that defines your place in the list. For instance, if you make
         * a list request and receive 100 objects, end the result contains
         *   `paging_token=pt1`, your subsequent call can include
         * `starting_after=pt1` in order to fetch the next page of the list.
         */
        starting_after?: parameters["startingAfter"];
      };
    };
    responses: {
      /** Taxgroup collection */
      200: {
        schema: {
          tax_groups?: (definitions["Entity"] & definitions["TaxGroup"])[];
          starting_after?: string;
        };
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /** Insert a new taxgroup */
  aid_tax_post: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
      };
      body: {
        /** tax_group */
        data: {
          /**
           * @description The id you have defined for the taxgroup (must not have training or leading spaces). An auto-generated tax_id will be created if not provided
           *
           * @example vmva1
           */
          tax_id?: string;
        } & definitions["TaxGroup"];
      };
    };
    responses: {
      /** Taxgroup created */
      200: {
        schema: definitions["Entity"] & definitions["TaxGroup"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /** Update an existing taxgroup */
  aid_tax_put: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** A string that uniquely identifies the tax. (must not have trailing or leading spaces) */
        tax_id: parameters["taxId"];
      };
      body: {
        /** tax_group */
        data: definitions["TaxGroup"];
      };
    };
    responses: {
      /** Taxgroup updated */
      200: {
        schema: definitions["Entity"] & definitions["TaxGroup"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
  /** Delete an existing taxgroup */
  aid_tax_delete: {
    parameters: {
      path: {
        /** An id that uniquely identifies the account. */
        aid: parameters["accountId"];
        /** A string that uniquely identifies the tax. (must not have trailing or leading spaces) */
        tax_id: parameters["taxId"];
      };
    };
    responses: {
      /** Taxgroup deleted */
      200: {
        schema: definitions["Entity"] & definitions["TaxGroup"];
      };
      400: responses["BadRequest"];
      401: responses["AccessForbidden"];
      403: responses["Forbidden"];
      500: responses["ServerError"];
    };
  };
}

export interface external {}
